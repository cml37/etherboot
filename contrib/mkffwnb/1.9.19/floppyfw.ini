#!/bin/sh

# Define a function to strip CRs from files and chmod if desired
stripcr () {
	#[ -r $1 ] && { echo stripcr $1 $2; tr -d '\r' < $1 > $2; }
	#[ $3 ] && { echo chmod $3 $2; chmod $3 $2; }
	[ -r $1 ] && { tr -d '\r' < $1 > $2; }
	[ $3 ] && { chmod $3 $2; }
}

cd /
echo  
echo "Extracting filesystem: "

#
# fixing CRLF-stuff
#
stripcr /mnt/tmp/config /etc/config

. /etc/config

bzcat /mnt/tmp/floppyfw/add.bz2 | tar -x

echo -n "Looking for module packages: "
for i in /mnt/tmp/modules/*.bz2; do
	if test -f $i
	then
		echo "	$i "
		bzcat $i | tar -x
	fi
done
echo

if test -f /mnt/tmp/modules/*.o;
then
  echo "Adding modules."
  cp /mnt/tmp/modules/*.o /lib/modules 2> /dev/null
fi

echo "Copying configuration."
stripcr /mnt/tmp/hosts /etc/hosts
stripcr /mnt/tmp/modules.lst /etc/modules.lst
stripcr /mnt/tmp/network.ini /etc/network.init 755
stripcr /mnt/tmp/firewall.ini /etc/firewall.init 755

cp /mnt/tmp/licenses/* /licenses 2> /dev/null

#
# Packages (contributed by: t'Sade) 
#
echo -n "Looking for extra packages: "
for i in /mnt/tmp/packages/*.bz2; do
	if test -f $i
	then
		echo "	$i "
		bzcat $i | tar -x
	fi
done

echo

if [ ${SECOND_DEVICE} != 'n' ];
then
  mkdir /mnt/second
  mount -t vfat ${SECOND_DEVICE} /mnt/second
  echo "Unpacking packages from secondary device \"${SECOND_DEVICE}\" "
  for i in /mnt/second/packages/*.bz2; do
    if test -f $i
    then
       echo -n "$i "
       bzcat $i | tar -x
    fi
  done
  umount /mnt/second
  echo
fi

echo "Looking for pre- scripts..."

for i in /mnt/tmp/packages/pre-*.ini; do
	if test -f $i
	then
		PRE=${i#/mnt/tmp/packages}
		stripcr $i /etc/$PRE 755
		fi
done
for i in /etc/pre-*.ini; do
	if test -f $i
	then
		echo "Running $i"
		chmod 755 $i
		$i
	fi
done
echo "...scripts done." 

echo "Inserting modules."
while read myline
 do
  case ${myline} in
   \#*)
    ;;
   *)
#   modprobe ${myline}
    insmod -f ${myline} >> $DEBUG_LOG 2>> $DEBUG_LOG
    if [ $? -eq  0 ] ; then
       echo -n "${myline}  "
    fi
    ;;
  esac
 done < /etc/modules.lst

echo
echo "Initializing network: "
/etc/network.init
echo 

if [ ${USE_SYSLOG} = 'y' ]; 
then
       echo "Starting klogd and syslogd"
       echo -n "klogd "
       klogd
       echo "syslogd"
       syslogd ${SYSLOG_FLAGS}
fi

if [ ${FAKEIDENT} ]; 
then
  echo running fakeident with ${FAKEIDENT}.
  identd ${FAKEIDENT}
fi

#
# firewall.init was run from here before but is now run from 
# network.init because of DHCP and EXTERNAL script's
#

echo "Looking for post- scripts..."
for i in /mnt/tmp/packages/post-*.ini; do
	if test -f $i
	then
		POST=${i#/mnt/tmp/packages}
		stripcr $i /etc/$POST 755
	fi
done
for i in /etc/post-*.ini; do
	if test -f $i
	then
		echo "Running $i"
		chmod 755 $i
		$i
	fi
done
echo "...scripts done." 

umount /mnt/tmp
rm -r /mnt/tmp

if [ ${OPEN_SHELL} = 'y' ];
then
	echo "Opening Virtual Consoles: "
	#
	open -c 1 -- sh 
	open -c 2 -- sh 
	open -c 3 -- sh 
	open -c 4 -- sh 
	open -c 5 -- sh 
	open -c 6 -- sh 
	open -c 7 -- sh 

case "${SERIAL_CONSOLE}" in
    ttyS0 | TTYS0 )
         ln /dev/ttyS0 /dev/tty9
                 echo "Opening shell on 1st serial port"
         open -c 9 -- ash
         ;;    
    ttyS1 | TTYS1 )
         ln /dev/ttyS1 /dev/tty9
                 echo "Opening shell on 2nd serial port"
         open -c 9 -- ash
         ;;    
    N | n)         
    	;;
    *)         
         echo "Variable SERIAL_CONSOLE neither ttyS0 nor ttyS1"
esac

else
	echo "No shell executed"
fi

#
# Fix given by Rick Reynolds <rick@rickandviv.net>
# (sleep for days don't work.
#
while [ 1 -gt 0 ]; do
   #
   # Here you can have a small "cron" like thingie. this is then done 
   # daily. Idea by Andreas Meyer.
   #
   [ -x /etc/daily.sh ] && /etc/daily.sh

   #
   # And the one day sleep:
   #
   sleep 86400
done
