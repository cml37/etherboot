Index: bochs.h
===================================================================
RCS file: /cvsroot/bochs/bochs/bochs.h,v
retrieving revision 1.128
diff -u -r1.128 bochs.h
--- bochs.h	28 Nov 2003 15:07:25 -0000	1.128
+++ bochs.h	4 Jan 2004 05:08:03 -0000
@@ -297,7 +297,8 @@
   CPU2LOG, CPU3LOG, CPU4LOG, CPU5LOG, CPU6LOG, CPU7LOG, CPU8LOG, CPU9LOG,
   CPU10LOG, CPU11LOG, CPU12LOG, CPU13LOG, CPU14LOG, CPU15LOG, CTRLLOG,
   UNMAPLOG, SERRLOG, BIOSLOG, PIT81LOG, PIT82LOG, IODEBUGLOG, PCI2ISALOG,
-  PLUGINLOG, EXTFPUIRQLOG , PCIVGALOG, PCIUSBLOG, VTIMERLOG, STIMERLOG
+  PLUGINLOG, EXTFPUIRQLOG , PCIVGALOG, PCIUSBLOG, VTIMERLOG, STIMERLOG,
+  PCIPNICLOG
 };
 
 class BOCHSAPI iofunctions {
@@ -633,6 +634,7 @@
   // bx_cdrom_options  cdromd; 
   bx_serial_options com[BX_N_SERIAL_PORTS];
   bx_usb_options    usb[BX_N_USB_HUBS];
+  bx_pnic_options   pnic;
   bx_rom_options    rom;
   bx_vgarom_options vgarom;
   bx_rom_options    optrom[BX_N_OPTROM_IMAGES]; // Optional rom images 
Index: config.h.in
===================================================================
RCS file: /cvsroot/bochs/bochs/config.h.in,v
retrieving revision 1.130
diff -u -r1.130 config.h.in
--- config.h.in	26 Dec 2003 13:53:38 -0000	1.130
+++ config.h.in	4 Jan 2004 05:08:05 -0000
@@ -260,6 +260,7 @@
 #define BX_USE_P2I_SMF     1  // PCI-to-ISA bridge
 #define BX_USE_PCIVGA_SMF  1  // PCI-VGA
 #define BX_USE_PCIUSB_SMF  1  // USB hub
+#define BX_USE_PCIPNIC_SMF 1  // PCI pseudo NIC
 #define BX_USE_NE2K_SMF    1  // NE2K
 #define BX_USE_EFI_SMF     1  // External FPU IRQ
 #define BX_USE_GAME_SMF    1  // Gameport
@@ -274,6 +275,7 @@
    || !BX_USE_SER_SMF || !BX_USE_UM_SMF || !BX_USE_VGA_SMF \
    || !BX_USE_SB16_SMF || !BX_USE_DEV_SMF || !BX_USE_PCI_SMF \
    || !BX_USE_P2I_SMF || !BX_USE_PCIVGA_SMF || !BX_USE_PCIUSB_SMF \
+   || !BX_USE_PCIPNIC_SMF \
    || !BX_USE_NE2K_SMF || !BX_USE_EFI_SMF || !BX_USE_GAME_SMF)
 #error You must use SMF to have plugins
 #endif
@@ -890,6 +892,20 @@
 
 // this enables TUN/TAP packet mover; determined by configure script
 #define HAVE_TUNTAP 0
+
+
+// Pseudo PCI NIC
+#define BX_PCI_PNIC_SUPPORT 0
+
+#if (BX_PCI_PNIC_SUPPORT && !BX_PCI_SUPPORT)
+#error To enable the PCI pseudo NIC, you must also enable PCI
+#endif
+
+// Check for NE2K support, since all the networking code is ifdeffed
+// under that.  There should probably be a more generic "enable-networking"
+#if (BX_PCI_PNIC_SUPPORT && !BX_NE2K_SUPPORT)
+#error To enable the pseudo NIC, you must also enable ne2000
+#endif
 
 
 // I/O Interface to debug
Index: configure.in
===================================================================
RCS file: /cvsroot/bochs/bochs/configure.in,v
retrieving revision 1.236
diff -u -r1.236 configure.in
--- configure.in	26 Dec 2003 14:16:50 -0000	1.236
+++ configure.in	4 Jan 2004 05:09:24 -0000
@@ -811,6 +811,23 @@
     ]
   )
 
+AC_MSG_CHECKING(for pseudo NIC support)
+AC_ARG_ENABLE(pnic,
+  [  --enable-pnic                     enable pseudo NIC support],
+  [if test "$enableval" = yes; then
+    AC_MSG_RESULT(yes)
+    AC_DEFINE(BX_PCI_PNIC_SUPPORT, 1)
+    PCI_OBJ="$PCI_OBJ pcipnic.o"
+   else
+    AC_MSG_RESULT(no)
+    AC_DEFINE(BX_PCI_PNIC_SUPPORT, 0)
+   fi],
+  [
+    AC_MSG_RESULT(no)
+    AC_DEFINE(BX_PCI_PNIC_SUPPORT, 0)
+    ]
+  )
+
 AC_MSG_CHECKING(for Promise DC2300 VLB-IDE support)
 AC_ARG_ENABLE(dc2300-vlb-ide,
   [  --enable-dc2300-vlb-ide           enable Promise DC2300 VLB-IDE support],
Index: main.cc
===================================================================
RCS file: /cvsroot/bochs/bochs/main.cc,v
retrieving revision 1.255
diff -u -r1.255 main.cc
--- main.cc	29 Dec 2003 20:58:25 -0000	1.255
+++ main.cc	4 Jan 2004 05:09:35 -0000
@@ -1279,6 +1279,46 @@
 #if !BX_WITH_WX
   bx_options.ne2k.Oscript->set_ask_format ("Enter new script name, or 'none': [%s] ");
 #endif
+  bx_options.pnic.Oenabled = new bx_param_bool_c (BXP_PNIC_ENABLED,
+      "Enable Pseudo NIC emulation",
+      "Enables the Pseudo NIC emulation",
+      0);
+  bx_options.pnic.Oioaddr = new bx_param_num_c (BXP_PNIC_IOADDR,
+      "Pseudo NIC I/O Address",
+      "I/O base address of the emulated Pseudo NIC device",
+      0, 0xffff,
+      0xdc00);
+  bx_options.pnic.Oioaddr->set_base (16);
+  bx_options.pnic.Oirq = new bx_param_num_c (BXP_PNIC_IRQ,
+      "Pseudo NIC Interrupt",
+      "IRQ used by the Pseudo NIC device",
+      0, 15,
+      11);
+  bx_options.pnic.Oirq->set_options (bx_param_num_c::USE_SPIN_CONTROL);
+  bx_options.pnic.Omacaddr = new bx_param_string_c (BXP_PNIC_MACADDR,
+      "MAC Address",
+      "MAC address of the Pseudo NIC device. Don't use an address of a machine on your net.",
+      "\xfe\xfd\xde\xad\xbe\xef", 6);
+  bx_options.pnic.Omacaddr->get_options ()->set (bx_options.pnic.Omacaddr->RAW_BYTES);
+  bx_options.pnic.Omacaddr->set_separator (':');
+  bx_options.pnic.Oethmod = new bx_param_enum_c (BXP_PNIC_ETHMOD,
+      "Ethernet module",
+      "Module used for the connection to the real net.",
+       eth_module_list,
+       0,
+       0);
+  bx_options.pnic.Oethmod->set_by_name ("null");
+  bx_options.pnic.Oethdev = new bx_param_string_c (BXP_PNIC_ETHDEV,
+      "Ethernet device",
+      "Device used for the connection to the real net. This is only valid if an ethernet module other than 'null' is used.",
+      "xl0", BX_PATHNAME_LEN);
+  bx_options.pnic.Oscript = new bx_param_string_c (BXP_PNIC_SCRIPT,
+      "Device configuration script",
+      "Name of the script that is executed after Bochs initializes the network interface (optional).",
+      "none", BX_PATHNAME_LEN);
+#if !BX_WITH_WX
+  bx_options.pnic.Oscript->set_ask_format ("Enter new script name, or 'none': [%s] ");
+#endif
   bx_param_c *ne2k_init_list[] = {
     bx_options.ne2k.Opresent,
     bx_options.ne2k.Oioaddr,
@@ -1287,6 +1327,13 @@
     bx_options.ne2k.Oethmod,
     bx_options.ne2k.Oethdev,
     bx_options.ne2k.Oscript,
+    bx_options.pnic.Oenabled,
+    bx_options.pnic.Oioaddr,
+    bx_options.pnic.Oirq,
+    bx_options.pnic.Omacaddr,
+    bx_options.pnic.Oethmod,
+    bx_options.pnic.Oethdev,
+    bx_options.pnic.Oscript,
     NULL
   };
   menu = new bx_list_c (BXP_NE2K, "NE2K Configuration", "", ne2k_init_list);
@@ -3338,6 +3385,55 @@
         }
       }
     }
+  else if (!strcmp(params[0], "pnic")) {
+    int tmp[6];
+    char tmpchar[6];
+    int valid = 0;
+    int n;
+    for (i=1; i<num_params; i++) {
+      if (!strncmp(params[i], "enabled=", 8)) {
+        bx_options.pnic.Oenabled->set (atol(&params[i][8]));
+	if ( bx_options.pnic.Oenabled->get() ) {
+		// Force ne2k to be enabled
+		bx_options.ne2k.Opresent->set (1);
+          }
+        }
+      else if (!strncmp(params[i], "ioaddr=", 7)) {
+        if ( (params[i][7] == '0') && (params[i][8] == 'x') )
+          bx_options.pnic.Oioaddr->set (strtoul (&params[i][7], NULL, 16));
+        else
+          bx_options.pnic.Oioaddr->set (strtoul (&params[i][7], NULL, 10));
+        bx_options.pnic.Oenabled->set (1);
+        }
+      else if (!strncmp(params[i], "irq=", 4)) {
+        bx_options.pnic.Oirq->set (atol(&params[i][4]));
+        }
+      else if (!strncmp(params[i], "mac=", 4)) {
+        n = sscanf(&params[i][4], "%x:%x:%x:%x:%x:%x",
+                   &tmp[0],&tmp[1],&tmp[2],&tmp[3],&tmp[4],&tmp[5]);
+        if (n != 6) {
+          PARSE_ERR(("%s: pnic mac address malformed.", context));
+        }
+        for (n=0;n<6;n++)
+          tmpchar[n] = (unsigned char)tmp[n];
+        bx_options.pnic.Omacaddr->set (tmpchar);
+        valid |= 0x04;
+        }
+      else if (!strncmp(params[i], "ethmod=", 7)) {
+        if (!bx_options.pnic.Oethmod->set_by_name (strdup(&params[i][7])))
+          PARSE_ERR(("%s: ethernet module '%s' not available", context, strdup(&params[i][7])));
+        }
+      else if (!strncmp(params[i], "ethdev=", 7)) {
+        bx_options.pnic.Oethdev->set (strdup(&params[i][7]));
+        }
+      else if (!strncmp(params[i], "script=", 7)) {
+        bx_options.pnic.Oscript->set (strdup(&params[i][7]));
+        }
+      else {
+        PARSE_ERR(("%s: unknown parameter for pnic ignored.", context));
+        }
+      }
+    }
   else if (!strcmp(params[0], "floppy_bootsig_check")) {
     if (num_params != 2) {
       PARSE_ERR(("%s: floppy_bootsig_check directive malformed.", context));
@@ -4150,6 +4246,29 @@
 }
 
 int
+bx_write_pnic_options (FILE *fp, bx_pnic_options *opt)
+{
+  fprintf (fp, "pnic: enabled=%d", opt->Oenabled->get ());
+  if (opt->Oenabled->get ()) {
+    char *ptr = opt->Omacaddr->getptr ();
+    fprintf (fp, ", ioaddr=0x%04x, irq=%d, mac=%02x:%02x:%02x:%02x:%02x:%02x, ethmod=%s, ethdev=%s, script=%s",
+	     opt->Oioaddr->get (),
+	     opt->Oirq->get (),
+	     (unsigned int)(0xff & ptr[0]),
+	     (unsigned int)(0xff & ptr[1]),
+	     (unsigned int)(0xff & ptr[2]),
+	     (unsigned int)(0xff & ptr[3]),
+	     (unsigned int)(0xff & ptr[4]),
+	     (unsigned int)(0xff & ptr[5]),
+	     opt->Oethmod->get_choice(opt->Oethmod->get()),
+	     opt->Oethdev->getptr (),
+	     opt->Oscript->getptr () );
+  }
+  fprintf (fp, "\n");
+  return 0;
+}
+
+int
 bx_write_sb16_options (FILE *fp, bx_sb16_options *opt)
 {
   if (!opt->Opresent->get ()) {
@@ -4335,6 +4454,7 @@
   fprintf (fp, "i440fxsupport: enabled=%d\n", bx_options.Oi440FXSupport->get ());
   bx_write_clock_options (fp, &bx_options.clock);
   bx_write_ne2k_options (fp, &bx_options.ne2k);
+  bx_write_pnic_options (fp, &bx_options.pnic);
   fprintf (fp, "newharddrivesupport: enabled=%d\n", bx_options.OnewHardDriveSupport->get ());
   bx_write_loader_options (fp, &bx_options.load32bitOSImage);
   bx_write_log_options (fp, &bx_options.log);
Index: plugin.h
===================================================================
RCS file: /cvsroot/bochs/bochs/plugin.h,v
retrieving revision 1.20
diff -u -r1.20 plugin.h
--- plugin.h	4 Aug 2003 16:03:08 -0000	1.20
+++ plugin.h	4 Jan 2004 05:09:36 -0000
@@ -39,6 +39,7 @@
 #define BX_PLUGIN_EXTFPUIRQ "extfpuirq"
 #define BX_PLUGIN_PCIVGA    "pcivga"
 #define BX_PLUGIN_PCIUSB    "pciusb"
+#define BX_PLUGIN_PCIPNIC   "pcipnic"
 #define BX_PLUGIN_GAMEPORT  "gameport"
 
 
@@ -298,6 +299,7 @@
 DECLARE_PLUGIN_INIT_FINI_FOR_MODULE(pci2isa)
 DECLARE_PLUGIN_INIT_FINI_FOR_MODULE(pcivga)
 DECLARE_PLUGIN_INIT_FINI_FOR_MODULE(pciusb)
+DECLARE_PLUGIN_INIT_FINI_FOR_MODULE(pcipnic)
 DECLARE_PLUGIN_INIT_FINI_FOR_MODULE(sb16)
 DECLARE_PLUGIN_INIT_FINI_FOR_MODULE(ne2k)
 DECLARE_PLUGIN_INIT_FINI_FOR_MODULE(extfpuirq)
Index: gui/siminterface.h
===================================================================
RCS file: /cvsroot/bochs/bochs/gui/siminterface.h,v
retrieving revision 1.112
diff -u -r1.112 siminterface.h
--- gui/siminterface.h	5 Sep 2003 22:07:54 -0000	1.112
+++ gui/siminterface.h	4 Jan 2004 05:09:41 -0000
@@ -328,6 +328,13 @@
   BXP_USB1_ENABLED,
   BXP_USB1_IOADDR,
   BXP_USB1_IRQ,
+  BXP_PNIC_ENABLED,
+  BXP_PNIC_IOADDR,
+  BXP_PNIC_IRQ,
+  BXP_PNIC_MACADDR,
+  BXP_PNIC_ETHMOD,
+  BXP_PNIC_ETHDEV,
+  BXP_PNIC_SCRIPT,
   BXP_PRIVATE_COLORMAP,
   BXP_FULLSCREEN,
   BXP_SCREENMODE,
@@ -1284,6 +1291,15 @@
   bx_param_num_c *Oirq;
   } bx_usb_options;
 
+typedef struct {
+  bx_param_bool_c *Oenabled;
+  bx_param_num_c *Oioaddr;
+  bx_param_num_c *Oirq;
+  bx_param_string_c *Omacaddr;
+  bx_param_enum_c *Oethmod;
+  bx_param_string_c *Oethdev;
+  bx_param_string_c *Oscript;
+  } bx_pnic_options;
 
 ////////////////////////////////////////////////////////////////////
 // base class simulator interface, contains just virtual functions.
Index: iodev/devices.cc
===================================================================
RCS file: /cvsroot/bochs/bochs/iodev/devices.cc,v
retrieving revision 1.58
diff -u -r1.58 devices.cc
--- iodev/devices.cc	26 Dec 2003 13:53:39 -0000	1.58
+++ iodev/devices.cc	4 Jan 2004 05:09:42 -0000
@@ -56,7 +56,10 @@
 #endif
 #if BX_PCI_USB_SUPPORT
     pluginPciUSBAdapter = NULL;
-#endif                               
+#endif        
+#if BX_PCI_PNIC_SUPPORT
+    pluginPciPNicAdapter = NULL;
+#endif
 #endif
   pit = NULL;
   pluginKeyboard = &stubKeyboard;
@@ -166,6 +169,9 @@
 #if BX_PCI_USB_SUPPORT
     PLUG_load_plugin(pciusb, PLUGTYPE_OPTIONAL);
 #endif
+#if BX_PCI_PNIC_SUPPORT
+    PLUG_load_plugin(pcipnic, PLUGTYPE_OPTIONAL);
+#endif
 #else
     BX_ERROR(("Bochs is not compiled with PCI support"));
 #endif
@@ -290,6 +296,9 @@
 #endif
 #if BX_PCI_USB_SUPPORT
     pluginPciUSBAdapter->reset(type);
+#endif
+#if BX_PCI_PNIC_SUPPORT
+    pluginPciPNicAdapter->reset(type);
 #endif
   }
 #endif
Index: iodev/iodev.h
===================================================================
RCS file: /cvsroot/bochs/bochs/iodev/iodev.h,v
retrieving revision 1.37
diff -u -r1.37 iodev.h
--- iodev/iodev.h	4 Aug 2003 16:03:09 -0000	1.37
+++ iodev/iodev.h	4 Jan 2004 05:09:44 -0000
@@ -299,6 +299,7 @@
   bx_devmodel_c    *pluginPci2IsaBridge;
   bx_devmodel_c    *pluginPciVgaAdapter;
   bx_devmodel_c    *pluginPciUSBAdapter;
+  bx_devmodel_c	   *pluginPciPNicAdapter;
   bx_pit_c         *pit;
   bx_keyb_stub_c   *pluginKeyboard;
   bx_dma_stub_c    *pluginDmaDevice;
@@ -417,6 +418,9 @@
 #include "iodev/unmapped.h"
 #include "iodev/eth.h"
 #include "iodev/ne2k.h"
+#if BX_PCI_PNIC_SUPPORT
+#include "iodev/pcipnic.h"
+#endif
 #include "iodev/guest2host.h"
 #include "iodev/slowdown_timer.h"
 #include "iodev/extfpuirq.h"
